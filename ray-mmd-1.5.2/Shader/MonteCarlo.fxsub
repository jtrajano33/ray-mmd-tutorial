// Monte Carlo integration of distributions

// Hammersley Points on the Hemisphere
// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html

float VanDerCorpus(uint n, uint base)
{
	float invBase = 1.0 / float(base);
	float denom   = 1.0;
	float result  = 0.0;

	for (uint i = 0u; i < 32u; ++i)
	{
		if (n > 0u)
		{
			denom   = mod(float(n), 2.0);
			result += denom * invBase;
			invBase = invBase / 2.0;
			n = uint(float(n) / 2.0);
		}
	}

	return result;
}

uint ReverseBits32(uint bits)
{
	bits = (bits << 16) | ( bits >> 16);
	bits = ((bits & 0x00ff00ff) << 8) | ((bits & 0xff00ff00) >> 8);
	bits = ((bits & 0x0f0f0f0f) << 4) | ((bits & 0xf0f0f0f0) >> 4);
	bits = ((bits & 0x33333333) << 2) | ((bits & 0xcccccccc) >> 2);
	bits = ((bits & 0x55555555) << 1) | ((bits & 0xaaaaaaaa) >> 1);
	return bits;
}

float2 Hammersley(uint i, uint samplesCount)
{
	float E1 = (float)i / samplesCount;
	float E2 = ReverseBits32(i) * 2.3283064365386963e-10;
	return float2(E1, E2);
}

float2 HammersleyNoBitOps(uint i, uint samplesCount)
{
	float E1 = (float)i / samplesCount;
	return float2(E, VanDerCorpus(i, 2u));
}

float2 Hammersley(uint i, uint samplesCount, int2 random)
{
	float E1 = frac((float)i / samplesCount + float(random.x & 0xffff) / (1 << 16));
	float E2 = float(ReverseBits32(i) ^ random.y) * 2.3283064365386963e-10;
	return float2(E1, E2);
}

float3 HammersleySampleCos(float2 Xi)
{
	float phi = 2 * PI * Xi.x;

	float cosTheta = sqrt(Xi.y);
	float sinTheta = sqrt(1 - cosTheta * cosTheta);

	float3 H;
	H.x = sinTheta * cos(phi);
	H.y = sinTheta * sin(phi);
	H.z = cosTheta;

	return H;
}

float3 HammersleySampleGGX(float2 Xi, float roughness)
{
	float m = roughness * roughness;
	float m2 = m * m;
	float u = (1 - Xi.y) / (1 + (m2 - 1) * Xi.y);

	return HammersleySampleCos(float2(Xi.x, u));
}

float3 TangentToWorld(float3 N, float3 H)
{
	float3 TangentY = abs(N.z) < 0.999 ? float3(0,0,1) : float3(1,0,0);
	float3 TangentX = normalize(cross(TangentY, N));
	return TangentX * H.x + cross(N, TangentX) * H.y + N * H.z;
}

float3 ImportanceSampleDiffuseIBL(sampler source, float3 N, float3 V, float roughness, int2 random)
{
	const uint NumSamples = 32;

	float3 lighting = 0;

	for (int i = 0; i < NumSamples; i++)
	{
		float2 E = Hammersley(i, NumSamples, random);
		float3 L = TangentToWorld(N, HammersleySampleCos(E));
		float3 H = normalize(V + L);

		float nv = saturate(dot(N, V));
		float nl = saturate(dot(N, L));
		float vh = saturate(dot(V, H));

		if (nl > 0.0)
		{
			float3 radiance = tex2Dlod(source, float4(ComputeSphereCoord(L), 0, 0)).rgb;
			
			float energyBias = 0.5 * roughness;
			float energyFactor = lerp(1, 1 / 1.51, roughness);

			float Fd90 = energyBias + 2.0 * vh * vh * roughness;
			float FdV = lerp(1, Fd90, pow5(1 - nv));
			float FdL = lerp(1, Fd90, pow5(1 - nl));

			lighting += radiance * FdV * FdL * energyFactor;
		}
	}

	return lighting / NumSamples;
}

float3 ImportanceSampleSpecularIBL(sampler source, float3 N, float3 V, float3 f0, float roughness, int2 random)
{
	const uint NumSamples = 32;

	float3 lighting = 0;

	for (uint i = 0; i < NumSamples; i++)
	{
		float2 E = Hammersley(i, NumSamples, random);
		float3 H = TangentToWorld(N, HammersleySampleGGX(E, roughness));
		float3 L = 2 * dot(V, H) * H - V;

		float nv = saturate(dot(N, V));
		float nl = saturate(dot(N, L));
		float nh = saturate(dot(N, H));
		float vh = saturate(dot(V, H));

		if (nl > 0)
		{
			float3 radiance = tex2Dlod(source, float4(ComputeSphereCoord(L), 0, 0)).rgb;

			float m2 = roughness * roughness;
			float Gv = nl * (nv * (1 - m2) + m2);
			float Gl = nv * (nl * (1 - m2) + m2);
			float G = 0.5 / (Gv + Gl);

			float3 F = lerp(f0, 1, pow(1 - vh, 5));

			lighting += radiance * F * G * nl * (4 * vh / nh);
		}
	}

	return lighting / NumSamples;
}