#include "../../ray.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"

float mColBalanceRP : CONTROLOBJECT<string name="(self)"; string item = "BalanceR+";>;
float mColBalanceGP : CONTROLOBJECT<string name="(self)"; string item = "BalanceG+";>;
float mColBalanceBP : CONTROLOBJECT<string name="(self)"; string item = "BalanceB+";>;
float mColBalanceRM : CONTROLOBJECT<string name="(self)"; string item = "BalanceR-";>;
float mColBalanceGM : CONTROLOBJECT<string name="(self)"; string item = "BalanceG-";>;
float mColBalanceBM : CONTROLOBJECT<string name="(self)"; string item = "BalanceB-";>;
float mColBalance  :  CONTROLOBJECT<string name="(self)"; string item = "BalanceGray+";>;

#if SKYBOX_WITHOUT_ENV_ROTATION == 0
float mEnvRotateX : CONTROLOBJECT<string name="(self)"; string item = "EnvRotateX";>;
float mEnvRotateY : CONTROLOBJECT<string name="(self)"; string item = "EnvRotateY";>;
float mEnvRotateZ : CONTROLOBJECT<string name="(self)"; string item = "EnvRotateZ";>;

static float3x3 matTransform = CreateRotate(float3(mEnvRotateX, mEnvRotateY, mEnvRotateZ) * PI_2);
#endif

#if SKYBOX_BLUR_ENABLE
	texture SkyboxMap<string ResourceName = SKYBOX_BLUR_MAP_FILE; int Miplevels = SKYBOX_BLUR_MIPMAP_LEVEL + 1;>;
#elif SKYBOX_HDR_ENABLE
	texture SkyboxMap<string ResourceName = SKYBOX_HDR_FILE; int Miplevels = 1;>;
#else
	texture SkyboxMap<string ResourceName = SKYBOX_MAP_FILE; int Miplevels = 1;>;
#endif
sampler SkyboxMapSamp = sampler_state
{
	texture = <SkyboxMap>;
#if SKYBOX_BLUR_ENABLE
	MINFILTER = LINEAR; MAGFILTER = LINEAR; MIPFILTER = LINEAR;
#else
	MINFILTER = LINEAR; MAGFILTER = LINEAR; MIPFILTER = NONE;
#endif
	ADDRESSU = CLAMP; ADDRESSV = CLAMP;
};

float3 ApplyColorBalance(float3 color)
{
	float3 lum = luminance(color);
	color = lerp(lum, color, 1 - mColBalance);
	color *= float3(1 + float3(mColBalanceRP, mColBalanceGP, mColBalanceBP) - float3(mColBalanceRM, mColBalanceGM, mColBalanceBM));
	return color;
}

void SkyboxVS(
	in float4 Position : POSITION,
	out float4 oNormal : TEXCOORD0,
	out float4 oPosition : SV_Position)
{
#if SKYDOME_ENABLE
	oNormal = normalize(Position);
	oNormal.y = oNormal.y<-0.05 ? -0.05 : oNormal.y;
	oNormal.y += 0.04999;
	oPosition = mul(float4(oNormal.xyz * length(Position), 1) , matViewProject);
	oNormal.y -= 0.04999;
#else
	oNormal = normalize(Position);
	oPosition = mul(Position, matViewProject);
#endif
}

float4 SkyboxPS(in float3 normal : TEXCOORD0, in float4 screenPosition : SV_Position) : COLOR
{
#if SKYBOX_WITHOUT_ENV_ROTATION
	float3 N = normalize(normal);
#else
	float3 N = normalize(mul(matTransform, normal));
#endif

	float2 uv = ComputeSphereCoord(N);

#if SKYBOX_BLUR_ENABLE
	float3 color = DecodeRGBT(tex2Dlod(SkyboxMapSamp, float4(uv, 0, (float)SKYBOX_BLUR_MIPMAP_LEVEL)));
#else
	float3 color = DecodeRGBT(tex2Dlod(SkyboxMapSamp, float4(uv, 0, 0)));
#endif
	color.rgb = ApplyColorBalance(color.rgb);

#if SKYBOX_HDR_ENABLE || SKYBOX_BLUR_ENABLE
	return float4(linear2srgb(color.rgb), 1);
#else
	return float4(color.rgb, 1);
#endif
}

#define OBJECT_TEC(name, mmdpass)\
	technique name<string MMDPass = mmdpass;\
	> {\
		pass DrawObject {\
			AlphaTestEnable = FALSE; AlphaBlendEnable = FALSE;\
			VertexShader = compile vs_3_0 SkyboxVS();\
			PixelShader  = compile ps_3_0 SkyboxPS();\
		}\
	}

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTec1, "object_ss")

technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTec<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}