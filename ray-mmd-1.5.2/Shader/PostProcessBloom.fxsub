static float2 BloomOffset1 = ViewportOffset2 * 2;
static float2 BloomOffset2 = ViewportOffset2 * 4;
static float2 BloomOffset3 = ViewportOffset2 * 8;
static float2 BloomOffset4 = ViewportOffset2 * 16;
static float2 BloomOffset5 = ViewportOffset2 * 32;

static const float2 BloomScale = 512 * float2(ViewportAspect, 1);

static const float2 BloomOffsetX1 = float2( 2 / BloomScale.x, 0.0);
static const float2 BloomOffsetX2 = float2( 4 / BloomScale.x, 0.0);
static const float2 BloomOffsetX3 = float2( 8 / BloomScale.x, 0.0);
static const float2 BloomOffsetX4 = float2(16 / BloomScale.x, 0.0);
static const float2 BloomOffsetX5 = float2(32 / BloomScale.x, 0.0);

static const float2 BloomOffsetY1 = float2(0.0,  2 / BloomScale.y);
static const float2 BloomOffsetY2 = float2(0.0,  4 / BloomScale.y);
static const float2 BloomOffsetY3 = float2(0.0,  8 / BloomScale.y);
static const float2 BloomOffsetY4 = float2(0.0, 16 / BloomScale.y);
static const float2 BloomOffsetY5 = float2(0.0, 32 / BloomScale.y);

static float3 mBloomColorAll = hsv2rgb(float3(mBloomColorAllHP, mBloomColorAllSP, lerp(lerp(mBloomIntensityMin, mBloomIntensityMax, mBloomColorAllVP), 0, mBloomColorAllVM)));

texture DownsampleMap1st : RENDERCOLORTARGET<float2 ViewportRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;
sampler DownsampleSamp1st = sampler_state {
	texture = <DownsampleMap1st>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};

#if HDR_STAR_MODE || HDR_FLARE_MODE
texture DownsampleMap2nd : RENDERCOLORTARGET<float2 ViewportRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
sampler DownsampleSamp2nd = sampler_state {
	texture = <DownsampleMap2nd>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = CLAMP; AddressV = CLAMP;
};
#endif

texture BloomMap1st : RENDERCOLORTARGET<float2 ViewportRatio={0.50, 0.50}; string Format="A16B16G16R16F";>;
texture BloomMap2nd : RENDERCOLORTARGET<float2 ViewportRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture BloomMap3rd : RENDERCOLORTARGET<float2 ViewportRatio={0.125, 0.125}; string Format="A16B16G16R16F";>;
texture BloomMap4th : RENDERCOLORTARGET<float2 ViewportRatio={0.0625, 0.0625}; string Format="A16B16G16R16F";>;
texture BloomMap5th : RENDERCOLORTARGET<float2 ViewportRatio={0.03125, 0.03125}; string Format="A16B16G16R16F";>;
texture BloomMap1stTemp : RENDERCOLORTARGET<float2 ViewportRatio={0.50, 0.50}; string Format="A16B16G16R16F";>;
texture BloomMap2ndTemp : RENDERCOLORTARGET<float2 ViewportRatio={0.25, 0.25}; string Format="A16B16G16R16F";>;
texture BloomMap3rdTemp : RENDERCOLORTARGET<float2 ViewportRatio={0.125, 0.125}; string Format="A16B16G16R16F";>;
texture BloomMap4thTemp : RENDERCOLORTARGET<float2 ViewportRatio={0.0625, 0.0625}; string Format="A16B16G16R16F";>;
texture BloomMap5thTemp : RENDERCOLORTARGET<float2 ViewportRatio={0.03125, 0.03125}; string Format="A16B16G16R16F";>;

sampler BloomSamp1st = sampler_state {
	texture = <BloomMap1st>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp1stTemp = sampler_state {
	texture = <BloomMap1stTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp2nd = sampler_state {
	texture = <BloomMap2nd>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp2ndTemp = sampler_state {
	texture = <BloomMap2ndTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp3rd = sampler_state {
	texture = <BloomMap3rd>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp3rdTemp = sampler_state {
	texture = <BloomMap3rdTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp4th = sampler_state {
	texture = <BloomMap4th>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp4thTemp = sampler_state {
	texture = <BloomMap4thTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp5th = sampler_state {
	texture = <BloomMap5th>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
sampler BloomSamp5thTemp = sampler_state {
	texture = <BloomMap5thTemp>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};

void HDRDownsampleVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float2 oTexcoord1 : TEXCOORD0,
	out float2 oTexcoord2 : TEXCOORD1,
	out float2 oTexcoord3 : TEXCOORD2,
	out float2 oTexcoord4 : TEXCOORD3,
	out float4 oPosition : POSITION,
	uniform float2 step)
{
	oPosition = Position;
	oTexcoord1 = Texcoord + step * 0.5;
	oTexcoord2 = oTexcoord1 + float2(step.x, 0);
	oTexcoord3 = oTexcoord1 + float2(step.x, step.y);
	oTexcoord4 = oTexcoord1 + float2(0, step.y);
}

float4 HDRDownsample4XPS(
	in float2 coord1 : TEXCOORD0,
	in float2 coord2 : TEXCOORD1,
	in float2 coord3 : TEXCOORD2,
	in float2 coord4 : TEXCOORD3,
	uniform sampler source) : COLOR
{
	float4 color = tex2Dlod(source, float4(coord1, 0, 0));
	color += tex2Dlod(source, float4(coord2, 0, 0));
	color += tex2Dlod(source, float4(coord3, 0, 0));
	color += tex2Dlod(source, float4(coord4, 0, 0));
	return color * 0.25;
}

float4 HDRDownsamplePS(in float2 coord : TEXCOORD0, uniform sampler source) : COLOR
{
	return tex2Dlod(source, float4(coord, 0, 0));
}

void GlareDetectionVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float4 oTexcoord1 : TEXCOORD0,
	out float4 oTexcoord2 : TEXCOORD1,
	out float4 oTexcoord3 : TEXCOORD2,
	out float4 oPosition : POSITION)
{
	float4 offset0 = float4(-1,0,1,0) * ViewportOffset2.xyxy;
	float4 offset1 = float4(0,-1,0,1) * ViewportOffset2.xyxy;

	oPosition = Position;
	oTexcoord1 = Texcoord.xyxy + ViewportOffset.xyxy;
	oTexcoord2 = oTexcoord1.xyxy + offset0;
	oTexcoord3 = oTexcoord1.xyxy + offset1;

	oTexcoord1.zw = mExposure;
#if HDR_EYE_ADAPTATION == 1
	float aveLum = tex2Dlod(EyeLumAveMapSamp, float4(0.5,0.5,0,0)).r;
	oTexcoord1.zw *= ComputeExposureISO(aveLum, 12.5);
#elif HDR_EYE_ADAPTATION == 2
	float aveLum = tex2Dlod(EyeLumAveMapSamp, float4(0.5,0.5,0,0)).r;
	oTexcoord1.zw *= ComputeExposureISO(aveLum, 18.0);
#endif
}

float4 GlareDetectionPS(
	in float4 coord1 : TEXCOORD0,
	in float4 coord2 : TEXCOORD1,
	in float4 coord3 : TEXCOORD2,
	uniform sampler source) : COLOR
{
#if HDR_BLOOM_MODE > 0
	float3 color = tex2Dlod(source, float4(coord1.xy, 0, 0)).rgb;
	color = min(color, tex2Dlod(source, float4(coord2.xy, 0, 0)).rgb);
	color = min(color, tex2Dlod(source, float4(coord2.zw, 0, 0)).rgb);
	color = min(color, tex2Dlod(source, float4(coord3.xy, 0, 0)).rgb);
	color = min(color, tex2Dlod(source, float4(coord3.zw, 0, 0)).rgb);
	color = clamp(color, 0, 65535);

#if HDR_BLOOM_MODE == 1
	float3 bloom = max(0, color - mBloomThreshold);
#elif HDR_BLOOM_MODE == 2
	float3 bloom = saturate(color - mBloomThreshold);
#elif HDR_BLOOM_MODE == 3
	float lum = luminance(color) * coord1.z;
	float3 bloom = saturate(color * (lum - mBloomThreshold) / lum);
#elif HDR_BLOOM_MODE == 4
	float lum = luminance(color) * coord1.z;
	float3 bloom = clamp(color * saturate((lum - mBloomThreshold) / lum), 0, 8);
#endif

	bloom *= mBloomColorAll;
#else
	float3 bloom = 0;
#endif

	float4 MRT3 = tex2Dlod(Gbuffer3Map, float4(coord1.xy, 0, 0));
	float4 MRT4 = tex2Dlod(Gbuffer4Map, float4(coord1.xy, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord1.xy, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord1.xy, 0, 0));

	float3 emissive0 = DecodeGBufferEmissive(MRT3, MRT4);
	float3 emissive1 = DecodeGBufferEmissive(MRT7, MRT8);

	bloom += max(0.0, lerp(emissive0, emissive1, MRT8.a) - 1.0);

	return float4(bloom, 0);
}

float4 BloomBlurPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
	const float weights[9] = { 0.048297,0.08393,0.124548,0.157829,0.170793,0.157829,0.124548,0.08393,0.048297 };

	float2 coords = coord - offset * 4.0;

	float4 color = 0;
	color += tex2Dlod(source, float4(coords, 0, 0)) * weights[0]; coords += offset;
	color += tex2Dlod(source, float4(coords, 0, 0)) * weights[1]; coords += offset;
	color += tex2Dlod(source, float4(coords, 0, 0)) * weights[2]; coords += offset;
	color += tex2Dlod(source, float4(coords, 0, 0)) * weights[3]; coords += offset;
	color += tex2Dlod(source, float4(coords, 0, 0)) * weights[4]; coords += offset;
	color += tex2Dlod(source, float4(coords, 0, 0)) * weights[5]; coords += offset;
	color += tex2Dlod(source, float4(coords, 0, 0)) * weights[6]; coords += offset;
	color += tex2Dlod(source, float4(coords, 0, 0)) * weights[7]; coords += offset;
	color += tex2Dlod(source, float4(coords, 0, 0)) * weights[8];

	return color;
}

float4 GlareLightCompVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float4 oTexcoord0 : TEXCOORD0,
	out float3 oTexcoord1 : TEXCOORD1) : POSITION
{
	float g1 = exp(-(0 * 0) / (2.0 * mBloomRadius * mBloomRadius));
	float g2 = exp(-(1 * 1) / (2.0 * mBloomRadius * mBloomRadius));
	float g3 = exp(-(2 * 2) / (2.0 * mBloomRadius * mBloomRadius));
	float g4 = exp(-(3 * 3) / (2.0 * mBloomRadius * mBloomRadius));
	float g5 = exp(-(4 * 4) / (2.0 * mBloomRadius * mBloomRadius));
	float weight = g1 + g2 + g3 + g4 + g5;

	oTexcoord0.xy = Texcoord;
	oTexcoord0.z = g1 / weight;
	oTexcoord0.w = g2 / weight;
	oTexcoord1.x = g3 / weight;
	oTexcoord1.y = g4 / weight;
	oTexcoord1.z = g5 / weight;

	return Position;
}

float4 GlareLightCompPS(
	in float4 coord1 : TEXCOORD0,
	in float3 coord2 : TEXCOORD1) : COLOR
{
	float3 bloom2 = tex2Dlod(BloomSamp2nd, float4(coord1.xy + 0.5 / (ViewportSize * 0.25), 0, 0)).rgb;
	float3 bloom3 = tex2Dlod(BloomSamp3rd, float4(coord1.xy + 0.5 / (ViewportSize * 0.125), 0, 0)).rgb;
	float3 bloom4 = tex2Dlod(BloomSamp4th, float4(coord1.xy + 0.5 / (ViewportSize * 0.0625), 0, 0)).rgb;
	float3 bloom5 = tex2Dlod(BloomSamp5th, float4(coord1.xy + 0.5 / (ViewportSize * 0.03125), 0, 0)).rgb;

	float3 bloom = 0.0f;
	bloom += bloom2 * coord1.w;
	bloom += bloom3 * coord2.x;
	bloom += bloom4 * coord2.y;
	bloom += bloom5 * coord2.z;

#if HDR_STAR_MODE > 0
	float4 star = max(tex2Dlod(StreakSamp1st, float4(coord1.xy, 0, 0)), tex2Dlod(StreakSamp2nd, float4(coord1.xy, 0, 0)));
#if HDR_STAR_MODE > 2
	star = max(star, max(tex2Dlod(StreakSamp3rd, float4(coord1.xy, 0, 0)), tex2Dlod(StreakSamp4th, float4(coord1.xy, 0, 0))));
#endif
	bloom += star.rgb;
#endif

	return float4(bloom, coord1.z);
}