float EnvironmentMip(int miplevel, float smoothness)
{
	return lerp(miplevel, 0, smoothness * smoothness);
}

float3 EnvironmentReflect(float3 normal, float3 view)
{
	return reflect(-view, normal);
}

float3 FresnelSchlickGlass(float3 N, float3 V, float smoothness, float3 specular)
{
	return lerp(specular, 1.0, pow5(1 - saturate(dot(N, V))) / (40 - 39 * smoothness));
}

float FresnelSchlickClearCoat(float nv, float smoothness, float specular)
{
	return specular + (max(smoothness, specular) - specular) * pow5(1 - nv);
}

float3 EnvironmentSpecularCloth(float nv, float smoothness, float3 specular)
{
	const float4 c0 = float4(0.24,  0.93, 0.01, 0.20);
	const float4 c1 = float4(2.00, -1.30, 0.40, 0.03);

	float s = 1.0 - nv;
	float e = s - c0.y;
	float g = c0.x * exp2(-(e * e) / (2.0 * c0.z)) + s * c0.w;
	float n = (1.0 - smoothness) * c1.x + c1.y;
	float r = max(1.0 - n * n, c1.z) * g;

	return specular * r + r * c1.w;
}

float3 EnvironmentSpecularLUT(sampler lut, float nv, float smoothness, float3 specular)
{
	float2 brdf = tex2Dlod(lut, float4(nv, smoothness, 0, 0)).rg;
	return specular * brdf.r + brdf.g;	
}

float3 EnvironmentSpecularUnreal4(float nv, float smoothness, float3 specular)
{
	float4 c0 = float4(-1, -0.0275, -0.572, 0.022);
	float4 c1 = float4(1, 0.0425, 1.04, -0.04);
	float4 r = (1.0 - smoothness) * c0 + c1;
	float a004 = min(r.x * r.x, exp2(-9.28 * nv)) * r.x + r.y;
	float2 AB = float2(-1.04, 1.04) * a004 + r.zw;
	return specular * AB.x + AB.y;
}

float EnvironmentSpecularUnreal4(float nv, float smoothness)
{
	const float2 c0 = float2(-1, -0.0275);
	const float2 c1 = float2(1, 0.0425);
	float2 r = (1.0 - smoothness) * c0 + c1;
	return min(r.x * r.x, exp2(-9.28 * nv)) * r.x + r.y;
}

float ComputeSpecularOcclusion(float nv, float ao, float smoothness)
{
	return saturate(pow(nv + ao, smoothness) - 1 + ao);
}

float4 EncodeYcbcr(float4 screenPosition, float3 color1, float3 color2)
{
	bool pattern = (fmod(screenPosition.x, 2.0) == fmod(screenPosition.y, 2.0));

	color1 = EncodeYcbcr(color1);
	color2 = EncodeYcbcr(color2);

	float4 result = 0.0f;
	result.r = color1.r;
	result.g = (pattern) ? color1.g: color1.b;
	result.b = color2.r;
	result.a = (pattern) ? color2.g: color2.b;
	return result;  
}

float EdgeFilter(float2 center, float2 a0, float2 a1, float2 a2, float2 a3)
{
	const float THRESH = 30./255.;
	float4 lum = float4(a0.x, a1.x , a2.x, a3.x);
	float4 w = 1.0 - step(THRESH, abs(lum - center.x));
	float W = w.x + w.y + w.z + w.w;
	w.x = (W == 0.0) ? 1.0 : w.x;
	W   = (W == 0.0) ? 1.0 : W;
	return (w.x * a0.y + w.y * a1.y + w.z * a2.y + w.w * a3.y) / W;
}

void DecodeYcbcr(sampler source, float2 coord, float4 screenPosition, float2 offset, out float3 color1, out float3 color2)
{
	float4 packed = tex2Dlod(source, float4(coord, 0, 0));

	float4 env2 = tex2Dlod(source, float4(coord + float2(offset.x, 0.0), 0, 0));
	float4 env3 = tex2Dlod(source, float4(coord - float2(offset.x, 0.0), 0, 0));
	float4 env4 = tex2Dlod(source, float4(coord + float2(0.0, offset.y), 0, 0));
	float4 env5 = tex2Dlod(source, float4(coord - float2(0.0, offset.y), 0, 0));

	env2.rg = EdgeFilter(packed.rg, env2.rg, env3.rg, env4.rg, env5.rg);
	env2.ba = EdgeFilter(packed.ba, env2.ba, env3.ba, env4.ba, env5.ba);

	bool pattern = (fmod(screenPosition.x, 2.0) == fmod(screenPosition.y, 2.0));

	color1 = (pattern) ? float3(packed.rg, env2.g) : float3(packed.r, env2.g, packed.g);
	color2 = (pattern) ? float3(packed.ba, env2.a) : float3(packed.b, env2.a, packed.a);

	color1 = DecodeYcbcr(color1);
	color2 = DecodeYcbcr(color2);
}