#define DOF_BLUR_RADIUS 10
#define DOF_LEAKAGE_TEST 1
#define DOF_POSSION_SAMPLES 36

static const float mFstop = lerp(lerp(1.8, 8.0, mFstopP), 1.0, mFstopM);
static const float mFocalLength = lerp(lerp(35.0, 70.0, mFocalLengthP), 1e-5, mFocalLengthM);
static const float mFocalDistance = lerp(lerp(1, 100.0, mFocalDistanceP), -10.0, mFocalDistanceM);
static const float mFocalRegion = lerp(lerp(1.0, 5.0, mFocalRegionP), 0.5, mFocalRegionM);
static const float mFocalMapScale = 0.5;
static const float mAngle = 1.236;

static const float2 mFocalStepScale = 1024 * float2(ViewportAspect, 1);

texture AutoFocalMap : RENDERCOLORTARGET<int2 Dimensions = {1, 1}; string Format="R16F";>;
sampler AutoFocalMapSamp = sampler_state { texture=<AutoFocalMap>; MinFilter=POINT; MagFilter=POINT; MipFilter=NONE; AddressU=CLAMP; AddressV=CLAMP; };

texture FocalBlur1Map : RENDERCOLORTARGET<float2 ViewportRatio={mFocalMapScale, mFocalMapScale}; string Format="A16B16G16R16F";>;
texture FocalBlur2Map : RENDERCOLORTARGET<float2 ViewportRatio={mFocalMapScale, mFocalMapScale}; string Format="A16B16G16R16F";>;
texture FocalBokehCoCNearMap : RENDERCOLORTARGET<float2 ViewportRatio={mFocalMapScale, mFocalMapScale}; string Format="A16B16G16R16F";>;
texture FocalBokehTempMap : RENDERCOLORTARGET<float2 ViewportRatio={mFocalMapScale, mFocalMapScale}; string Format="A16B16G16R16F";>;
texture FocalBokehMap : RENDERCOLORTARGET<float2 ViewportRatio={mFocalMapScale, mFocalMapScale}; string Format="A16B16G16R16F";>;
texture FocalBokehFarMap : RENDERCOLORTARGET<float2 ViewportRatio={mFocalMapScale, mFocalMapScale}; string Format="A16B16G16R16F";>;

sampler FocalBokehFarMapSamp = sampler_state { texture=<FocalBokehFarMap>; MinFilter=LINEAR; MagFilter=LINEAR; MipFilter=NONE; AddressU=CLAMP; AddressV=CLAMP; };
sampler FocalBokehCoCNearMapSamp = sampler_state { texture=<FocalBokehCoCNearMap>; MinFilter=LINEAR; MagFilter=LINEAR; MipFilter=NONE; AddressU=CLAMP; AddressV=CLAMP; };
sampler FocalBokehCoCNearMapPointSamp = sampler_state { texture=<FocalBokehCoCNearMap>; MinFilter=POINT; MagFilter=POINT; MipFilter=NONE; AddressU=CLAMP; AddressV=CLAMP; };
sampler FocalBokehTempMapSamp = sampler_state { texture=<FocalBokehTempMap>; MinFilter=LINEAR; MagFilter=LINEAR; MipFilter=NONE; AddressU=CLAMP; AddressV=CLAMP; };
sampler FocalBokehTempMapPointSamp = sampler_state { texture=<FocalBokehTempMap>; MinFilter=POINT; MagFilter=POINT; MipFilter=NONE; AddressU=CLAMP; AddressV=CLAMP; };
sampler FocalBlur1MapSamp = sampler_state { texture=<FocalBlur1Map>; MinFilter=LINEAR; MagFilter=LINEAR; MipFilter=NONE; AddressU=CLAMP; AddressV=CLAMP; };
sampler FocalBlur2MapSamp = sampler_state { texture=<FocalBlur2Map>; MinFilter=LINEAR; MagFilter=LINEAR; MipFilter=NONE; AddressU=CLAMP; AddressV=CLAMP; };
sampler FocalBokehMapSamp = sampler_state { texture=<FocalBokehMap>; MinFilter=LINEAR; MagFilter=LINEAR; MipFilter=NONE; AddressU=CLAMP; AddressV=CLAMP; };
sampler FocalBokehMapPointSamp = sampler_state { texture=<FocalBokehMap>; MinFilter=POINT; MagFilter=POINT; MipFilter=NONE; AddressU=CLAMP; AddressV=CLAMP; };

float GetSampleRadius()
{
	return 0.2;
}

float2 GetSamplePoint()
{
	float4 proj = mul(float4(AcsPosition, 1), matViewProject);
	proj /= proj.w;
	proj.xy = PosToCoord(proj.xy);
	return 0.5 + float2(proj.x - 0.5, 0.0) * step(0.25, mMeasureMode);
}

float GetSampleCircleSDF(float2 uv, float2 pos, float radius)
{
	float d = length(pos - uv);
	float d1 = d - radius;
	float d2 = d - radius * 0.85;
	return saturate(saturate(d2) - saturate(d1));
}

float GetFocalDistance()
{
	float focalDistance = mFocalDistance + (distance(CameraPosition, AcsPosition) - 1) * step(0.99, mMeasureMode);
	return max(1, focalDistance);
}

float GetFocalAperture(float Fstop)
{
	float aperture = 1.0 / Fstop;
	return aperture;
}

float GetFocalLength(float mFocalLength, float focalDistance)
{
	return 1.0 / (1.0 / (0.5 * mFocalLength * matProject._22) + 1.0 / focalDistance);
}

float ComputeDepthCoC(float depth, float4 focalParams, float focalRegion)
{
	float D = depth;
	float P = focalParams.x;
	float F = focalParams.y;
	float aspect = focalParams.z;

	P *= 0.001f;
	D *= 0.001f;
	F *= 0.001f;

	float CoC = aspect * F * (D - P) / (D * (P - F));
 	CoC = clamp(CoC, -2, 4);
 	CoC = pow(abs(CoC) / 4, focalRegion) * sign(CoC) * 4;

	return CoC;
}

float EncodeCoC(float CoC)
{
	return CoC;
}

float DecodeCoC(float CoC)
{
	return CoC;
}

float CalcAdaptedLength(float adaptedLength, float len, float speed, float delta)
{
    return max(0, adaptedLength + (len - adaptedLength) * (1.0f - exp2(-speed * delta)));
}

float4 ComputeFocalDistancePS(in float2 coord : TEXCOORD0, uniform sampler source) : COLOR
{
	static const float2 poisson[DOF_POSSION_SAMPLES] =
	{
		float2(-1.0,  0.0), float2(-2.0,  0.0), float2(-3.0,  0.0), float2(3.0,  0.0), float2(2.0,  0.0), float2(1.0,  0.0),
		float2(-1.0, -1.0), float2(-2.0, -1.0),	float2(-3.0, -1.0), float2(0.0, -1.0), float2(3.0, -1.0), float2(2.0, -1.0), float2(1.0, -1.0),
		float2(-1.0,  1.0), float2(-2.0,  1.0), float2(-3.0,  1.0), float2(0.0,  1.0), float2(3.0,  1.0), float2(2.0,  1.0), float2(1.0,  1.0),
		float2(-2.0,  2.0), float2(-1.0,  2.0), float2( 0.0,  2.0), float2(1.0,  2.0), float2(2.0,  2.0),
		float2(-2.0, -2.0), float2(-1.0, -2.0), float2( 0.0, -2.0), float2(1.0, -2.0), float2(2.0, -2.0),
		float2(-1.0,  3.0), float2( 0.0,  3.0), float2( 1.0,  3.0),
		float2(-1.0, -3.0), float2( 0.0, -3.0), float2( 1.0, -3.0),
	};

	const float2 sampleRadius = GetSampleRadius() / float2(ViewportAspect * 3, 3.0);
	const float2 samplePoint = GetSamplePoint();

	float minDepth = 65535;

	[loop]
	for (int i = 0; i < DOF_POSSION_SAMPLES; i++)
	{
		float depth = tex2Dlod(Gbuffer8Map, float4(samplePoint + poisson[i] * sampleRadius, 0, 0)).r;
		minDepth = min(minDepth, depth);
	}

	float2 avgDepth = 0;

	[loop]
	for (int j = 0; j < DOF_POSSION_SAMPLES; j++)
	{
		float depth = tex2Dlod(Gbuffer8Map, float4(samplePoint + poisson[j] * sampleRadius, 0, 0)).r;
		avgDepth += float2(depth, 1) * exp2(-abs(depth - minDepth));
	}

	float distnace = avgDepth.x / avgDepth.y;
	return lerp(distnace + mFocalDistance - 1, GetFocalDistance(), step(0.5, mMeasureMode));
}

float4 ComputeDepthBokehVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1) : POSITION
{
	float focalDistance = tex2Dlod(AutoFocalMapSamp, float4(0.5,0.5, 0, 0)).r;
	float focalLength = GetFocalLength(mFocalLength, focalDistance);
	float focalAperture = GetFocalAperture(mFstop);
	float4 focalCameraParams = float4(focalDistance, focalLength, focalAperture, 1);

	oTexcoord0 = Texcoord.xyxy;
	oTexcoord0.xy += ViewportOffset;
	oTexcoord1 = focalCameraParams;
	return Position;
}

float4 ComputeDepthBokehPS(in float2 coord : TEXCOORD0, in float4 focalCameraParams : TEXCOORD1, uniform sampler source) : COLOR
{
	float CoC = ComputeDepthCoC(tex2Dlod(Gbuffer8Map, float4(coord, 0, 0)).r, focalCameraParams, mFocalRegion);
	return float4(min(tex2Dlod(source, float4(coord, 0, 0)).rgb, float3(65535, 65535, 65535)), EncodeCoC(CoC));
}

float4 ComputeDepthBokeh4XPS(in float2 coord : TEXCOORD0, in float4 focalCameraParams : TEXCOORD1, uniform sampler source) : COLOR
{
	float4 offset = ViewportOffset2.xyxy * float4(-1.0, -1.0, 1.0, 1.0);

	float4 coords[4];
	coords[0] = float4(coord + offset.xy, 0, 0);
	coords[1] = float4(coord + offset.zy, 0, 0);
	coords[2] = float4(coord + offset.xw, 0, 0);
	coords[3] = float4(coord + offset.zw, 0, 0);

	float4 linearDepths;
	linearDepths.x = tex2Dlod(Gbuffer8Map, coords[0]).r;
	linearDepths.y = tex2Dlod(Gbuffer8Map, coords[1]).r;
	linearDepths.z = tex2Dlod(Gbuffer8Map, coords[2]).r;
	linearDepths.w = tex2Dlod(Gbuffer8Map, coords[3]).r;

	float3 colors[4];
	colors[0] = tex2Dlod(source, coords[0]).rgb;
	colors[1] = tex2Dlod(source, coords[1]).rgb;
	colors[2] = tex2Dlod(source, coords[2]).rgb;
	colors[3] = tex2Dlod(source, coords[3]).rgb;

	// anti-flicker
	float4 weights = 0;
 	weights.x = 1.0 / (max3(colors[0]) + 1.0);
 	weights.y = 1.0 / (max3(colors[1]) + 1.0);
 	weights.z = 1.0 / (max3(colors[2]) + 1.0);
 	weights.w = 1.0 / (max3(colors[3]) + 1.0);

	float4 color = 0;
	color.rgb += colors[0] * weights.x;
	color.rgb += colors[1] * weights.y;
	color.rgb += colors[2] * weights.z;
	color.rgb += colors[3] * weights.w;
	color.rgb /= dot(weights, 1.0f);

	float4 CoC;
	CoC.x = ComputeDepthCoC(linearDepths.x, focalCameraParams, mFocalRegion);
	CoC.y = ComputeDepthCoC(linearDepths.y, focalCameraParams, mFocalRegion);
	CoC.z = ComputeDepthCoC(linearDepths.z, focalCameraParams, mFocalRegion);
	CoC.w = ComputeDepthCoC(linearDepths.w, focalCameraParams, mFocalRegion);

#if 1
	color.a = CoC.x;
	if(abs(color.a) < CoC.y) color.a = CoC.y;
	if(abs(color.a) < CoC.z) color.a = CoC.z;
	if(abs(color.a) < CoC.w) color.a = CoC.w;
	if(color.a > 0) color.a = dot(0.25f, max(0, CoC));
	color.a = EncodeCoC(color.a);
#else
	color.a = EncodeCoC(dot(0.25f, CoC));
#endif

	return min(color, float4(65535, 65535, 65535, 65535));
}

float4 ComputeHexagonalFarBlur(sampler source, float2 coord, float2 offset)
{
	float4 colors = 0.0f;

	for (int i = 0; i < DOF_BLUR_RADIUS; ++i, coord += offset)
	{
		float4 color = tex2Dlod(source, float4(coord, 0, 0));
		color.a = (max(0, DecodeCoC(color.a)));
		color.rgb *= color.a;

		colors += color;
	}

	return min(float4(65535, 65535, 65535, 65535), colors / (colors.a + 1e-5));
}

float4 ComputeHexBlurXVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float4 oTexcoord0 : TEXCOORD0,
	out float2 oTexcoord1 : TEXCOORD1,
	out float2 oTexcoord2 : TEXCOORD2) : POSITION
{
	oTexcoord0 = Texcoord.xyxy;
	oTexcoord0.xy += float2(0.5, 0.5) / (ViewportSize * mFocalMapScale);
	oTexcoord1 = (float2(1.0, 1.0) / mFocalStepScale) * float2(cos(mAngle + PI / 2), sin(mAngle + PI / 2));
	oTexcoord2 = (float2(1.0, 1.0) / mFocalStepScale) * float2(cos(mAngle - PI / 6), sin(mAngle - PI / 6));
	return Position;
}

float4 ComputeHexBlurYVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD,
	out float4 oTexcoord0 : TEXCOORD0,
	out float2 oTexcoord1 : TEXCOORD1,
	out float2 oTexcoord2 : TEXCOORD2) : POSITION
{
	oTexcoord0 = Texcoord.xyxy;
	oTexcoord0.xy += float2(0.5, 0.5) / (ViewportSize * mFocalMapScale);
	oTexcoord1 = (float2(1.0, 1.0) / mFocalStepScale) * float2(cos(mAngle - PI / 6    ), sin(mAngle - PI / 6));
	oTexcoord2 = (float2(1.0, 1.0) / mFocalStepScale) * float2(cos(mAngle - PI / 6 * 5), sin(mAngle - PI / 6 * 5));
	return Position;
}

void ComputeHexBlurXFarPS(
	in float4 coord : TEXCOORD0,
	in float2 blur1 : TEXCOORD1,
	in float2 blur2 : TEXCOORD2,
	out float4 oColor0 : COLOR0,
	out float4 oColor1 : COLOR1,
	uniform sampler bokeh, 
	uniform sampler source)
{
	float CoC = tex2Dlod(bokeh, float4(coord.xy, 0, 0)).a;
	clip(DecodeCoC(CoC));

	float2 blurDirection1 = DecodeCoC(CoC) * blur1;
	float2 blurDirection2 = DecodeCoC(CoC) * blur2;

#if DOF_LEAKAGE_TEST
	float2 coord1 = coord.zw + ((DecodeCoC(tex2Dlod(bokeh, float4(coord.zw + blurDirection1, 0, 0)).a) > 0) ? blurDirection1 * 0.5 : (ViewportOffset / mFocalMapScale));
	float2 coord2 = coord.zw + ((DecodeCoC(tex2Dlod(bokeh, float4(coord.zw + blurDirection2, 0, 0)).a) > 0) ? blurDirection2 * 0.5 : (ViewportOffset / mFocalMapScale));
#else
	float2 coord1 = coord.zw + blurDirection1 * 0.5;
	float2 coord2 = coord.zw + blurDirection2 * 0.5;
#endif

	float4 color0 = ComputeHexagonalFarBlur(source, coord1, blurDirection1);
	float4 color1 = ComputeHexagonalFarBlur(source, coord2, blurDirection2);

	oColor0 = float4(color0.rgb, CoC);
	oColor1 = float4(color0.rgb + color1.rgb, CoC);
}

float4 ComputeHexBlurYFarPS(
	in float4 coord : TEXCOORD0,
	in float2 blur1 : TEXCOORD1,
	in float2 blur2 : TEXCOORD2,
	uniform sampler bokeh,
	uniform sampler vertical,
	uniform sampler diagonal) : COLOR
{
	float CoC = tex2Dlod(bokeh, float4(coord.xy, 0, 0)).a;
	clip(DecodeCoC(CoC));

	float2 blurDirection1 = DecodeCoC(CoC) * blur1;
	float2 blurDirection2 = DecodeCoC(CoC) * blur2;

#if DOF_LEAKAGE_TEST
	float2 coord1 = coord.zw + ((DecodeCoC(tex2Dlod(bokeh, float4(coord.zw + blurDirection1, 0, 0)).a) > 0) ? blurDirection1 * 0.5 : (ViewportOffset / mFocalMapScale));
	float2 coord2 = coord.zw + ((DecodeCoC(tex2Dlod(bokeh, float4(coord.zw + blurDirection2, 0, 0)).a) > 0) ? blurDirection2 * 0.5 : (ViewportOffset / mFocalMapScale));
#else
	float2 coord1 = coord.zw + blurDirection1 * 0.5;
	float2 coord2 = coord.zw + blurDirection2 * 0.5;
#endif

	float4 color1 = ComputeHexagonalFarBlur(vertical, coord1, blurDirection1);
	float4 color2 = ComputeHexagonalFarBlur(diagonal, coord2, blurDirection2);

   	return float4((color1.rgb + color2.rgb) * (1.0f / 3.0f), CoC);
}

float4 ComputeNearDownPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
	float4 coords[4];
	coords[0] = float4(coord, 0, 0);
	coords[1] = float4(coord + float2(1.0, 0.0) * offset, 0, 0);
	coords[2] = float4(coord + float2(0.0, 1.0) * offset, 0, 0);
	coords[3] = float4(coord + float2(1.0, 1.0) * offset, 0, 0);

	float4 colors[4];
	colors[0] = tex2Dlod(source, coords[0]);
	colors[1] = tex2Dlod(source, coords[1]);
	colors[2] = tex2Dlod(source, coords[2]);
	colors[3] = tex2Dlod(source, coords[3]);

	float4 CoC = float4(colors[0].w, colors[1].w, colors[2].w, colors[3].w);

	float4 color = 0;
	color.rgb += colors[0].rgb * abs(CoC.x);
	color.rgb += colors[1].rgb * abs(CoC.y);
	color.rgb += colors[2].rgb * abs(CoC.z);
	color.rgb += colors[3].rgb * abs(CoC.w);
	color.rgb /= dot(abs(CoC), 1.0f);

	color.a = CoC.x;
	if(abs(color.a) > CoC.y) color.a = CoC.y;
	if(abs(color.a) > CoC.z) color.a = CoC.z;
	if(abs(color.a) > CoC.w) color.a = CoC.w;
	if(color.a > 0)	color.a = dot(0.25f, max(0, CoC));
	color.a = EncodeCoC(color.a);

	return min(color, float4(65535, 65535, 65535, 65535));
}

float4 ComputeSmoothingNearPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
	float weights[5] = {1.0/16.0, 2.0/16.0, 4.0/16.0, 2.0/16.0, 1.0/16.0};

	float4 CoCs = 0;
	float weight = 0;

	[unroll]
	for(int i = -2; i < 2; i++)
	{
		float4 stepCoC = tex2Dlod(source, float4(coord + offset * i, 0, 0));
		CoCs += weights[i + 2] * stepCoC;
		weight += weights[i + 2];
	}

	return CoCs / weight;
}

float4 ComputeNearCoCPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform sampler sourceBlured) : COLOR
{
	float4 shrunk = tex2Dlod(source, float4(coord, 0, 0));
	float4 blured = tex2Dlod(sourceBlured, float4(coord, 0, 0));
	float weight = 2 * max(saturate(DecodeCoC(shrunk.a)), saturate(DecodeCoC(blured.a)));
	float4 color = lerp(shrunk, blured, saturate(weight));
	return color;
}

float4 ComputeNearSamllBlurPS(in float2 coord : TEXCOORD0, uniform sampler source, uniform float2 offset) : COLOR
{
	float4 sum = 0;
	sum += tex2Dlod(source, float4(coord + float2( 0.5, -1.5) * offset, 0, 0));
	sum += tex2Dlod(source, float4(coord + float2(-1.5, -0.5) * offset, 0, 0));
	sum += tex2Dlod(source, float4(coord + float2(-0.5,  1.5) * offset, 0, 0));
	sum += tex2Dlod(source, float4(coord + float2( 1.5,  0.5) * offset, 0, 0));
	return sum / 4;
}

float4 ComputeBokehGatherVS(
	in float4 Position : POSITION,
	in float4 Texcoord : TEXCOORD,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1) : POSITION
{
	float focalDistance = tex2Dlod(AutoFocalMapSamp, float4(0.5,0.5, 0, 0)).r;
	float focalLength = GetFocalLength(mFocalLength, focalDistance);
	float focalAperture = GetFocalAperture(mFstop);
	float4 focalCameraParams = float4(focalDistance, focalLength, focalAperture, 1);

	oTexcoord0 = Texcoord.xyxy;
	oTexcoord0.xy += float2(0.5, 0.5) / (ViewportSize * mFocalMapScale);
	oTexcoord0.zw += ViewportOffset;
	oTexcoord1 = focalCameraParams;

	return Position;
}

float4 ComputeBokehFarGatherPS(in float2 coord : TEXCOORD0, uniform sampler bokeh, uniform sampler source) : COLOR
{
	float4 samp1 = tex2Dlod(bokeh, float4(coord, 0, 0));
	float4 samp2 = tex2Dlod(source, float4(coord, 0, 0));

	float4 color;
	color.rgb = lerp(samp1.rgb, samp2.rgb, pow2(saturate(DecodeCoC(samp1.a) * 2)));
	color.a = samp1.a;

	return color;
}

float4 ComputeBokehGatherFinalPS(in float4 coord : TEXCOORD0, in float4 focalCameraParams : TEXCOORD1, uniform sampler bokeh, uniform sampler source, uniform float2 offset) : COLOR
{
	static const float2 poisson[DOF_POSSION_SAMPLES] =
	{
		float2(-1.0,  0.0), float2(-2.0,  0.0), float2(-3.0,  0.0), float2(3.0,  0.0), float2(2.0,  0.0), float2(1.0,  0.0),
		float2(-1.0, -1.0), float2(-2.0, -1.0),	float2(-3.0, -1.0), float2(0.0, -1.0), float2(3.0, -1.0), float2(2.0, -1.0), float2(1.0, -1.0),
		float2(-1.0,  1.0), float2(-2.0,  1.0), float2(-3.0,  1.0), float2(0.0,  1.0), float2(3.0,  1.0), float2(2.0,  1.0), float2(1.0,  1.0),
		float2(-2.0,  2.0), float2(-1.0,  2.0), float2( 0.0,  2.0), float2(1.0,  2.0), float2(2.0,  2.0),
		float2(-2.0, -2.0), float2(-1.0, -2.0), float2( 0.0, -2.0), float2(1.0, -2.0), float2(2.0, -2.0),
		float2(-1.0,  3.0), float2( 0.0,  3.0), float2( 1.0,  3.0),
		float2(-1.0, -3.0), float2( 0.0, -3.0), float2( 1.0, -3.0),
	};

	float4 CoC = tex2Dlod(bokeh, float4(coord.xy, 0, 0));
	float4 colors = float4(tex2Dlod(source, float4(coord.xy, 0, 0)).rgb, 1);

	offset *= (saturate(-DecodeCoC(CoC.a)) * 2 + 1);

	[unroll]
	for(int i = 0; i < DOF_POSSION_SAMPLES; i++)
	{
		float4 color = tex2Dlod(source, float4(coord.xy + poisson[i] * offset, 0, 0));
		colors += color;
	}

	CoC.a = ComputeDepthCoC(tex2Dlod(Gbuffer8Map, float4(coord.zw, 0, 0)).r, focalCameraParams, mFocalRegion);

	float SDF = GetSampleCircleSDF(coord.xy * ViewportSize, ViewportSize * GetSamplePoint(), ViewportSize.y * GetSampleRadius()) * 0.5;

	colors.rgb /= float(DOF_POSSION_SAMPLES + 1);
	colors.rgb = lerp(colors.rgb, ((CoC.a > 0) ? float3(0,0.05,0.1) : float3(0.1,0.05,0)) * abs(CoC.a), mTestMode);
	colors.rgb = lerp(colors.rgb, float3(0.01, 0.4, 0.09), SDF * mTestMode * (1 - step(0.5, mMeasureMode)));
	colors.a = lerp(saturate(pow2(CoC.a * 2)), 1, mTestMode);

	return colors;
}