#include "../../ray.conf"
#include "../../ray_advanced.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"

float mEnvRotateX : CONTROLOBJECT<string name="(self)"; string item = "EnvRotateX";>;
float mEnvRotateY : CONTROLOBJECT<string name="(self)"; string item = "EnvRotateY";>;
float mEnvRotateZ : CONTROLOBJECT<string name="(self)"; string item = "EnvRotateZ";>;
float mFogColorHP :  CONTROLOBJECT<string name="(self)"; string item = "FogColorH+";>;
float mFogColorSP :  CONTROLOBJECT<string name="(self)"; string item = "FogColorS+";>;
float mFogColorVP :  CONTROLOBJECT<string name="(self)"; string item = "FogColorV+";>;
float mFogColorVM :  CONTROLOBJECT<string name="(self)"; string item = "FogColorV-";>;
float mFogRangeP : CONTROLOBJECT<string name="(self)"; string item = "FogRange+";>;
float mFogRangeM : CONTROLOBJECT<string name="(self)"; string item = "FogRange-";>;
float mFogDensityP : CONTROLOBJECT<string name="(self)"; string item = "FogDensity+";>;
float mFogDensityM : CONTROLOBJECT<string name="(self)"; string item = "FogDensity-";>;
float mFogMipNearP : CONTROLOBJECT<string name="(self)"; string item = "FogMipNear+";>;
float mFogMipNearM : CONTROLOBJECT<string name="(self)"; string item = "FogMipNear-";>;
float mFogMipFarP : CONTROLOBJECT<string name="(self)"; string item = "FogMipFar+";>;
float mFogMipFarM : CONTROLOBJECT<string name="(self)"; string item = "FogMipFar-";>;

static const float FogMipFar = lerp(lerp(mFogFarLimit.x, mFogFarLimit.z, mFogMipFarP), mFogFarLimit.y, mFogMipFarM);
static const float FogMipNear = lerp(lerp(mFogNearLimit.x, mFogNearLimit.z, mFogMipNearP), mFogNearLimit.y, mFogMipNearM);
static const float FogRange = lerp(lerp(mFogRangeLimit.x, mFogRangeLimit.y, mFogRangeP), mFogRangeLimit.z, mFogRangeM);
static const float FogDensity = lerp(lerp(mFogDensityLimit.x, mFogDensityLimit.y, mFogDensityP), mFogDensityLimit.z, mFogDensityM);
static const float3 FogColor = hsv2rgb(float3(mFogColorHP, mFogColorSP, lerp(lerp(1, 2, mFogColorVP), 0, mFogColorVM)));
static const float3x3 matTransform = CreateRotate(float3(mEnvRotateX, mEnvRotateY, mEnvRotateZ) * PI_2);

#if SKYBOX_FOG_ENABLE
texture SkyboxBlurMap<string ResourceName = SKYBOX_FOG_MAP_FILE;>;
sampler SkyboxBlurMapSamp = sampler_state {
	texture = <SkyboxBlurMap>;
	MINFILTER = LINEAR; MAGFILTER = LINEAR; MIPFILTER = LINEAR;
	ADDRESSU = CLAMP; ADDRESSV = CLAMP;
};

float ComputeFogMip(float near, float far, float depth, float mipLevel)
{
	return (1 - saturate((depth - near) / (far - near))) * mipLevel;
}
#endif

void SkyboxVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float3 oTexcoord1 : TEXCOORD1,
	out float3 oTexcoord2 : TEXCOORD2,
	out float4 oPosition : POSITION)
{
	oTexcoord0 = oPosition = mul(Position, matViewProject);
	oTexcoord0.xy = PosToCoord(oTexcoord0.xy / oTexcoord0.w) + ViewportOffset;
	oTexcoord0.xy = oTexcoord0.xy * oTexcoord0.w;
	oTexcoord1 = normalize(Position.xyz);
}

float4 SkyboxPS(in float4 texcoord : TEXCOORD0,	in float3 normal : TEXCOORD1) : COLOR0
{
	float2 coord = texcoord.xy / texcoord.w;

	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, material);

#if SKYBOX_FOG_ENABLE
	float mipLevel = SKYBOX_FOG_MIPMAP_BASE;
	mipLevel += ComputeFogMip(FogMipNear, FogMipFar, material.linearDepth, SKYBOX_FOG_MIPMAP_LEVEL);

	float3 N = normalize(mul(matTransform, normalize(normal)));

	float3 color = DecodeRGBT(tex2Dlod(SkyboxBlurMapSamp, float4(ComputeSphereCoord(N), 0, mipLevel)));
#else
	float3 color = 1;
#endif

	color *= FogColor;
	color *= pow((1 - exp(-material.linearDepth / FogDensity)), FogRange);

#if SKYBOX_FOG_DISCARD_SKY
	color *= step(0, sum(material.albedo + material.specular) - 1e-5);
#endif

	return float4(color, 0.0);
}

#define OBJECT_TEC(name, mmdpass)\
	technique name<string MMDPass = mmdpass;\
	> {\
		pass DrawObject {\
			ZEnable = false; ZWriteEnable = false;\
			AlphaBlendEnable = true; AlphaTestEnable = FALSE;\
			SrcBlend = ONE; DestBlend = ONE;\
			VertexShader = compile vs_3_0 SkyboxVS();\
			PixelShader  = compile ps_3_0 SkyboxPS();\
		}\
	}

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTec1, "object_ss")

technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTec<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}