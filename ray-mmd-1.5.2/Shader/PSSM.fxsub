#include "../ray.conf"
#include "../ray_advanced.conf"
#include "../shader/common.fxsub"
#include "../shader/ShadowMapCascaded.fxsub"

#if SUN_SHADOW_QUALITY == 1
#	define SHADOW_MAP_SIZE 512
#elif SUN_SHADOW_QUALITY == 2
#	define SHADOW_MAP_SIZE 1024
#elif SUN_SHADOW_QUALITY == 3
#	define SHADOW_MAP_SIZE 2048
#elif SUN_SHADOW_QUALITY == 4
#	define SHADOW_MAP_SIZE 4096
#elif SUN_SHADOW_QUALITY == 5
#	define SHADOW_MAP_SIZE 8192
#endif

static float4x4 matLightProject = CreateOrthoProject(2, 2, mPSSMDepthZMin, mPSSMDepthZMax);
static float4x4 matLightView = CreateLightViewMatrix(SunDirection, -SunDirection, mLightDistance);
static float4x4 matLightViewProject = mul(matLightView, matLightProject);
static float4x4 matLightViewFromCameraView = mul(matViewInverse, matLightView);
static float4x4 lightCropParams = CreateLightCropParams(matLightViewFromCameraView, SHADOW_MAP_SIZE);

#if CASTER_ALPHA_MAP_ENABLE
texture DiffuseMap: MATERIALTEXTURE;
sampler DiffuseMapSamp = sampler_state
{
	texture = <DiffuseMap>;
	MINFILTER = POINT; MAGFILTER = POINT; MIPFILTER = POINT;
	ADDRESSU = WRAP; ADDRESSV = WRAP;
};
#endif

void CascadeShadowMapVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD0,
	out float2 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oPosition : POSITION)
{
	oTexcoord0 = Texcoord;

	oTexcoord1 = mul(Position, matLightViewProject);
	oTexcoord1.xy = oTexcoord1.xy * lightCropParams[PSSM_LAYERED_NUM].xy + lightCropParams[PSSM_LAYERED_NUM].zw;

	oPosition = oTexcoord1;
	oPosition.z /= mPSSMDepthZMax;
}

float4 CascadeShadowMapPS(
	in float4 coord0 : TEXCOORD0,
	in float4 coord1 : TEXCOORD1) : COLOR
{
#if CASTER_ALPHA_ENABLE
	float alpha = MaterialDiffuse.a;
#if CASTER_ALPHA_MAP_ENABLE
	if (use_texture) alpha *= tex2D(DiffuseMapSamp, coord0.xy).a;
#endif
	clip(alpha - CasterAlphaThreshold);
#endif
	return coord1.z;
}

technique DepthTech<string MMDPass = "object_ss";
>{
	pass CascadeShadowMap {
		AlphaBlendEnable = false; AlphaTestEnable = false;
		VertexShader = compile vs_3_0 CascadeShadowMapVS();
		PixelShader  = compile ps_3_0 CascadeShadowMapPS();
	}
}

technique DepthTec<string MMDPass = "object";>{}
technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTec<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}