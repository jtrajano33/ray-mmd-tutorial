#include "../../ray.conf"
#include "../../ray_advanced.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"
#include "../../shader/PhaseFunctions.fxsub"
#include "../../shader/AerialPerspective.fxsub"

float mFogMieHP : CONTROLOBJECT<string name="(self)"; string item = "MieH+";>;
float mFogMieSP : CONTROLOBJECT<string name="(self)"; string item = "MieS+";>;
float mFogMieVP : CONTROLOBJECT<string name="(self)"; string item = "MieV+";>;
float mFogMieVM : CONTROLOBJECT<string name="(self)"; string item = "MieV-";>;
float mFogMiePhaseP : CONTROLOBJECT<string name="(self)"; string item = "MiePhase+";>;
float mFogMiePhaseM : CONTROLOBJECT<string name="(self)"; string item = "MiePhase-";>;
float mFogMieTurbidityP : CONTROLOBJECT<string name="(self)"; string item = "MieTurbidity+";>;
float mFogMieTurbidityM : CONTROLOBJECT<string name="(self)"; string item = "MieTurbidity-";>;
float mFogRayleightHP : CONTROLOBJECT<string name="(self)"; string item = "RayleighH+";>;
float mFogRayleightSP : CONTROLOBJECT<string name="(self)"; string item = "RayleighS+";>;
float mFogRayleightVP : CONTROLOBJECT<string name="(self)"; string item = "RayleighV+";>;
float mFogRayleightVM : CONTROLOBJECT<string name="(self)"; string item = "RayleighV-";>;

float mFogRangeP : CONTROLOBJECT<string name="(self)"; string item = "Range+";>;
float mFogRangeM : CONTROLOBJECT<string name="(self)"; string item = "Range-";>;
float mFogDensityP : CONTROLOBJECT<string name="(self)"; string item = "Density+";>;
float mFogDensityM : CONTROLOBJECT<string name="(self)"; string item = "Density-";>;
float mFogIntensityP : CONTROLOBJECT<string name="(self)"; string item = "Intensity+";>;
float mFogIntensityM : CONTROLOBJECT<string name="(self)"; string item = "Intensity-";>;

static float mFogMiePhase = lerp(lerp(FogMiePhaseParams.x, FogMiePhaseParams.z, mFogMiePhaseP), FogMiePhaseParams.y, mFogMiePhaseM);
static float mFogMieTurbidity = lerp(lerp(FogMieTurbidityParams.x, FogMieTurbidityParams.z, mFogMieTurbidityP), FogMieTurbidityParams.y, mFogMieTurbidityM);
static float mFogRange = lerp(lerp(FogRangeParams.x, FogRangeParams.z, mFogRangeP), FogRangeParams.y, mFogRangeM);
static float mFogDensity = lerp(lerp(FogDensityParams.x, FogDensityParams.z, mFogDensityP), FogDensityParams.y, mFogDensityM);
static float mFogIntensity = lerp(lerp(FogIntensityParams.x, FogIntensityParams.z, mFogIntensityP), FogIntensityParams.y, mFogIntensityM);

static float3 FogMieColor = float3(mFogMieHP, mFogMieSP, lerp(lerp(1, 10, mFogMieVP), 0, mFogMieVM));
static float3 FogRayleightColor = float3(mFogRayleightHP, mFogRayleightSP, lerp(lerp(1, 10, mFogRayleightVP), 0, mFogRayleightVM));

#if FOG_WITH_GODRAY
texture FogMap : RENDERCOLORTARGET<float2 ViewportRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;
sampler FogMapSamp = sampler_state {
	texture = <FogMap>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
texture FogBlurMap : RENDERCOLORTARGET<float2 ViewportRatio={0.5, 0.5}; string Format="A16B16G16R16F";>;
sampler FogBlurMapSamp = sampler_state {
	texture = <FogBlurMap>;
	MinFilter = Linear; MagFilter = Linear; MipFilter = NONE;
	AddressU = BORDER; AddressV = BORDER; BorderColor = 0.0;
};
#endif

void AtmosphericFogVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD0,
	out float2 oTexcoord0 : TEXCOORD0,
	out float3 oTexcoord1 : TEXCOORD1,
	out float3 oTexcoord2 : TEXCOORD2,
	out float3 oTexcoord3 : TEXCOORD3,
	out float4 oPosition : POSITION)
{
	oPosition = float4(CoordToPos(Texcoord), 0, 1);
	oTexcoord0 = Texcoord + ViewportOffset2;
	oTexcoord1 = -mul(Position, matProjectInverse).xyz;
	oTexcoord2 = ComputeWaveLengthMie(mWaveLength, hsv2rgb(FogMieColor), mFogMieTurbidity, 4);
	oTexcoord3 = ComputeWaveLengthRayleigh(mWaveLength) * hsv2rgb(FogRayleightColor);
}

float4 AtmosphericFogPS(
	in float2 coord : TEXCOORD0, 
	in float3 viewdir : TEXCOORD1,
	in float3 mieLambda : TEXCOORD2,
	in float3 rayleight : TEXCOORD3) : COLOR
{
	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, material);

	float3 V = normalize(viewdir);
	float3 L = mul(SunDirection, (float3x3)matView);

#if FOG_WITH_GODRAY
	float3 fogAmount = ComputeSkyFogMie(V, L, mieLambda, rayleight, mFogMiePhase, mFogRange, mFogDensity, material.linearDepth) * mFogIntensity;
#else
	#if FOG_DISCARD_SKY
		clip(sum(material.albedo + material.specular) - 1e-5);
	#endif
	float3 fogAmount = ComputeSkyFogApproximation(V, L, mieLambda, rayleight, mFogMiePhase, mFogRange, mFogDensity, material.linearDepth) * mFogIntensity;
#endif

	return float4(fogAmount, luminance(mWaveLength) * material.linearDepth * mFogDensity);
}

#if FOG_WITH_GODRAY
void AtmosphericFogMieBlurVS(
	in float4 Position : POSITION,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float4 oTexcoord1 : TEXCOORD1,
	out float4 oPosition : POSITION)
{
	float4 illuminationPosition = mul(float4(-SunDirection * 80000, 1), matViewProject);

	oPosition = float4(CoordToPos(Texcoord) * step(0, illuminationPosition.w), 0, 1);
	oTexcoord0.xy = Texcoord + ViewportOffset2 * 2;
	oTexcoord0.zw = Texcoord * ViewportSize; 
	oTexcoord1 = illuminationPosition;
	oTexcoord1 /= oTexcoord1.w;
	oTexcoord1.xy = PosToCoord(oTexcoord1.xy) + ViewportOffset2 * 2;

	if (oTexcoord1.x < -0.25 || oTexcoord1.y < -0.25)
		oPosition = 0;
	if (oTexcoord1.x > 1.25 || oTexcoord1.y > 1.25)
		oPosition = 0;
}

float4 AtmosphericFogMieBlurPS(in float4 coord : TEXCOORD0, float4 illuminationPosition : TEXCOORD1) : COLOR0
{
	float jitter = PseudoRandom(coord.zw);

	float3 sampleColor = 0.0;
	float2 sampleDecay = float2(1.0, 0.96);
	float2 sampleDelta = (coord.xy - illuminationPosition.xy) / FOG_WITH_GODRAY_SAMPLES * FogSampleLength;
	float2 sampleCoord = coord.xy - sampleDelta * jitter;

	for (int i = 0; i < FOG_WITH_GODRAY_SAMPLES; i++)
	{
		sampleColor += tex2Dlod(FogMapSamp, float4(sampleCoord, 0, 0)).rgb * sampleDecay.x;
		sampleCoord -= sampleDelta;
		sampleDecay.x *= sampleDecay.y;
	}

	sampleColor /= FOG_WITH_GODRAY_SAMPLES;

	return float4(sampleColor + sampleColor * jitter / 255.0, 0);
}

float4 AtmosphericScatteringPS(
	in float2 coord : TEXCOORD0, 
	in float3 viewdir : TEXCOORD1,
	in float3 mieLambda : TEXCOORD2,
	in float3 rayleight : TEXCOORD3) : COLOR
{
	float4 MRT5 = tex2Dlod(Gbuffer5Map, float4(coord, 0, 0));
	float4 MRT6 = tex2Dlod(Gbuffer6Map, float4(coord, 0, 0));
	float4 MRT7 = tex2Dlod(Gbuffer7Map, float4(coord, 0, 0));
	float4 MRT8 = tex2Dlod(Gbuffer8Map, float4(coord, 0, 0));

	MaterialParam material;
	DecodeGbuffer(MRT5, MRT6, MRT7, MRT8, material);

	float3 V = normalize(viewdir);
	float3 L = mul(SunDirection, (float3x3)matView);
	float3 fogAmount = ComputeSkyFogRayleigh(V, L, mieLambda, rayleight, mFogMiePhase, mFogRange, mFogDensity, material.linearDepth) * mFogIntensity;

#if FOG_DISCARD_SKY
	if (sum(material.albedo + material.specular) <= 1e-5)
		fogAmount = 0;
#endif

	float4 fogBlur = tex2Dlod(FogBlurMapSamp, float4(coord + ViewportOffset, 0, 0));
	return float4(fogAmount + fogBlur, luminance(mWaveLength) * material.linearDepth * mFogDensity);
}

const float4 BackColor = 0.0;

#define OBJECT_TEC(name, mmdpass) \
	technique name<string MMDPass = mmdpass;\
	string Script =\
		"ClearSetColor=BackColor;"\
		"RenderColorTarget=FogMap;"\
		"Clear=Color;"\
		"Pass=DrawFog;"\
		"RenderColorTarget=FogBlurMap;"\
		"Clear=Color;"\
		"Pass=DrawLightShaft;"\
		"RenderColorTarget=;"\
		"Pass=DrawGodRay;"\
	;>{\
		pass DrawFog {\
			ZEnable = false; ZWriteEnable = false;\
			AlphaBlendEnable = false; AlphaTestEnable = FALSE;\
			VertexShader = compile vs_3_0 AtmosphericFogVS();\
			PixelShader = compile ps_3_0 AtmosphericFogPS();\
		}\
		pass DrawLightShaft {\
			ZEnable = false; ZWriteEnable = false;\
			AlphaBlendEnable = false; AlphaTestEnable = FALSE;\
			VertexShader = compile vs_3_0 AtmosphericFogMieBlurVS();\
			PixelShader = compile ps_3_0 AtmosphericFogMieBlurPS();\
		}\
		pass DrawGodRay {\
			ZEnable = false; ZWriteEnable = false;\
			AlphaBlendEnable = true; AlphaTestEnable = FALSE;\
			SrcBlend = ONE; DestBlend = ONE;\
			VertexShader = compile vs_3_0 AtmosphericFogVS();\
			PixelShader = compile ps_3_0 AtmosphericScatteringPS();\
		}\
	}
#else
#define OBJECT_TEC(name, mmdpass) \
	technique name<string MMDPass = mmdpass;\
	string Script =\
		"RenderColorTarget=;"\
		"Pass=DrawFog;"\
	;>{\
		pass DrawFog {\
			ZEnable = false; ZWriteEnable = false;\
			AlphaBlendEnable = true; AlphaTestEnable = FALSE;\
			SrcBlend = ONE; DestBlend = ONE;\
			VertexShader = compile vs_3_0 AtmosphericFogVS();\
			PixelShader = compile ps_3_0 AtmosphericFogPS();\
		}\
	}
#endif

OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec<string MMDPass = "edge";> {}
technique ShadowTech<string MMDPass = "shadow";> {}
technique ZplotTec<string MMDPass = "zplot";> {}