#include "../../ray.conf"
#include "../../ray_advanced.conf"
#include "../../shader/math.fxsub"
#include "../../shader/common.fxsub"
#include "../../shader/shadowcommon.fxsub"
#include "../../shader/gbuffer.fxsub"
#include "../../shader/gbuffer_sampler.fxsub"
#include "../../shader/PhaseFunctions.fxsub"

float mR : CONTROLOBJECT<string name="(self)"; string item="R+";>;
float mG : CONTROLOBJECT<string name="(self)"; string item="G+";>;
float mB : CONTROLOBJECT<string name="(self)"; string item="B+";>;
float mRangeP : CONTROLOBJECT<string name="(self)"; string item="Range+";>;
float mRangeM : CONTROLOBJECT<string name="(self)"; string item="Range-";>;
float mIntensityP : CONTROLOBJECT<string name="(self)"; string item="Intensity+";>;
float mIntensityM : CONTROLOBJECT<string name="(self)"; string item="Intensity-";>;
float mMiePhaseP : CONTROLOBJECT<string name="(self)"; string item="MiePhase+";>;
float mMiePhaseM : CONTROLOBJECT<string name="(self)"; string item="MiePhase-";>;
float mMieDensityP : CONTROLOBJECT<string name="(self)"; string item="Density+";>;
float mMieDensityM : CONTROLOBJECT<string name="(self)"; string item="Density-";>;

float3 mPosition : CONTROLOBJECT<string name="(self)"; string item = "Position";>;

static const float FogMiePhase  = lerp(lerp(FogMieParams.x, FogMieParams.z, mMiePhaseP), FogMieParams.y, mMiePhaseM);
static const float FogRange = lerp(lerp(FogRangeParams.x, FogRangeParams.z, mRangeP), FogRangeParams.y, mRangeM);
static const float FogDensity = lerp(lerp(FogDensityParams.x, FogDensityParams.z, mMieDensityP), FogDensityParams.y, mMieDensityM);
static const float FogIntensity = lerp(lerp(FogIntensityParams.x, FogIntensityParams.z, mIntensityP), FogIntensityParams.y, mIntensityM);

static const float3 FogPosition = mPosition;
static const float3 FogColor = float3(mR, mG, mB) * FogIntensity;

struct FogParams
{
	float3 FogColor;
	float3 FogPosition;

	float FogRange;
	float FogDensity;
	float FogIntensity;
	float FogMiePhase;
};

float2 ComputeRaySphereIntersection(float3 position, float3 dir, float3 center, float radius)
{
	float3 origin = position - center;
	float B = dot(origin, dir);
	float C = dot(origin, origin) - radius * radius;
	float D = B * B - C;

	float2 minimaxIntersections;
	if (D < 0.0)
	{
		minimaxIntersections = float2(-1.0, -1.0);
	}
	else
	{
		D = sqrt(D);
		minimaxIntersections = float2(-B - D, -B + D);
	}

	return minimaxIntersections;
}

float ComputeOpticalDepth(FogParams param, float depth)
{
	return exp(-depth * param.FogDensity);
}

float GetPhysicalLightAttenuation(float3 L, float radius, float attenuationBulbSize)
{
	const float invRadius = 1 / radius;
	float d = length(L);
	float fadeoutFactor = saturate((radius - d) * (invRadius / 0.2h));
	d = max(d - attenuationBulbSize, 0);
	float denom = 1 + d / attenuationBulbSize;
	float attenuation = fadeoutFactor * fadeoutFactor / denom;
	return saturate(attenuation);
}

float4 VolumetricFog(FogParams param, float3 V, float3 L, float3 start, float3 end, float jitter, int stepNum = VOLUMETRIC_FOG_SAMPLES_LENGTH)
{
	float3 sampleStep = (end - start) / stepNum;
#if VOLUMETRIC_FOG_WITH_JITTER
	float3 sampleStart = start + sampleStep * jitter;
#else
	float3 sampleStart = start + sampleStep;
#endif

	float sampleLength = length(sampleStep);
	float sampleOpticalDepth = ComputeOpticalDepth(param, sampleLength);

	float scatteringMie = 0;
	float scatteringDepth = 1;

	for (int i = 0; i < stepNum; i++, sampleStart += sampleStep, scatteringDepth *= sampleOpticalDepth)
	{
		float2 intersections = ComputeRaySphereIntersection(sampleStart, L, param.FogPosition, param.FogRange);
		float3 sampleLightPoint = sampleStart + L * intersections.y;

		float scattering = ComputeOpticalDepth(param, distance(sampleLightPoint, sampleStart));
		scattering *= sampleOpticalDepth;
		scattering *= scatteringDepth;

		scatteringMie += scattering;
	}

	float3 scattering = param.FogColor * scatteringMie * sampleLength;
	scattering *= param.FogIntensity;
#if VOLUMETRIC_FOG_ANISOTROPY
	scattering *= ComputePhaseMie(dot(V, normalize(L)), param.FogMiePhase);
#endif
	
	return float4(scattering , sampleLength * param.FogIntensity * stepNum * param.FogDensity);
}

void SphereFogVS(
	in float4 Position : POSITION,
	in float3 Normal : NORMAL,
	in float2 Texcoord : TEXCOORD0,
	out float4 oTexcoord0 : TEXCOORD0,
	out float3 oTexcoord1 : TEXCOORD1,
	out float4 oPosition  : POSITION)
{
	Position.xyz = FogPosition + Normal * FogRange * 1.01;
	oTexcoord0 = oPosition = mul(Position, matViewProject);
	oTexcoord0.xy = PosToCoord(oTexcoord0.xy / oTexcoord0.w) + ViewportOffset;
	oTexcoord0.xy = oTexcoord0.xy * oTexcoord0.w;
	oTexcoord1 = Position.xyz - CameraPosition;
}

float4 SphereFogPS(float4 texcoord : TEXCOORD0, float3 viewdir : TEXCOORD1) : COLOR
{
	FogParams param;
	param.FogPosition = FogPosition;
	param.FogRange = FogRange;
	param.FogIntensity = FogIntensity;
	param.FogColor = FogColor;
	param.FogMiePhase = FogMiePhase;
	param.FogDensity = FogDensity * FogRangeParams.z / param.FogRange;

	float3 V = normalize(viewdir);
	float2 intersections = ComputeRaySphereIntersection(CameraPosition, V, param.FogPosition, param.FogRange);
	clip(intersections.y);

	texcoord.xy /= texcoord.w;

	float linearDepth = tex2Dlod(Gbuffer8Map, float4(texcoord.xy, 0, 0)).r;
	clip(linearDepth - intersections.x);

	float3 start = CameraPosition + V * max(0, intersections.x);
	float3 end = CameraPosition + V * min(linearDepth, intersections.y);

	return VolumetricFog(param, V, -SunDirection, start, end, PseudoRandom(texcoord.xy * ViewportSize * (time + PI)));
}

technique MainTechBS0<string MMDPass = "object_ss"
;>{
	pass DrawObject {
		ZEnable = false; ZWriteEnable = false;
		AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;
		SrcBlend = ONE; DestBlend = ONE;
		CullMode = CW;
		VertexShader = compile vs_3_0 SphereFogVS();
		PixelShader  = compile ps_3_0 SphereFogPS();
	}
}

technique DepthTech<string MMDPass = "object";>{}
technique EdgeTec<string MMDPass = "edge";>{}
technique ShadowTech<string MMDPass = "shadow";>{}
technique ZplotTec<string MMDPass = "zplot";>{}